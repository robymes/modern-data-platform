version: '3.8'

volumes:
  postgres-data:
    driver: local
  kestra-data:
    driver: local

services:
  postgres_kestra:
    image: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - platform_network

  kestra:
    image: kestra/kestra:latest
    pull_policy: always
    user: "root"
    command: server standalone
    volumes:
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd
    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres_kestra:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4
        kestra:
          server:
            basicAuth:
              enabled: false
              username: "admin@localhost.dev" # it must be a valid email address
              password: kestra
          repository:
            type: postgres
          storage:
            type: local
            local:
              basePath: "/app/storage"
          queue:
            type: postgres
          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp
          url: http://localhost:8081/
    ports:
      - "8081:8080"
      - "8082:8081"
    depends_on:
      postgres_kestra:
        condition: service_started
    networks:
      - platform_network

  main:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    ports:
      - "8080:8000"
    volumes:
      - ../..:/workspaces:cached
    command: sleep infinity
    networks:
      - platform_network

  trino_dwh:
    image: trinodb/trino:474
    restart: unless-stopped
    environment:
      - TRINO_ENVIRONMENT=production
    ports:
      - "8080:8080"
    networks:
      - platform_network
    volumes:
      - ../trino/config.properties:/etc/trino/config.properties
      - ../trino/platform_catalog.properties:/etc/trino/catalog/platform_catalog.properties
      - ../data/synth_customer.duckdb:/opt/duckdb/synth_customer.duckdb

networks:
  platform_network:
    driver: bridge